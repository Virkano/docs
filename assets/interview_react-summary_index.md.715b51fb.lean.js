import{_ as o,E as p,o as r,c,k as s,a,J as n,w as t,U as l}from"./chunks/framework.0f008bc5.js";const E=JSON.parse('{"title":"React 模拟面试题 2023 版","description":"","frontmatter":{"author":"Kano"},"headers":[],"relativePath":"interview/react-summary/index.md","filePath":"interview/react-summary/index.md","lastUpdated":1690359404000}'),i={name:"interview/react-summary/index.md"},u=l("",9),d=s("strong",null,"答案仅供参考",-1),y=s("strong",null,"答案会详略得当，不会面面俱到",-1),D=l("",43),F=l("",11),h=s("ul",null,[s("li",null,[s("p",null,"React 主要使用 diff 队列保存需要更新哪些 DOM，得到 patch 树，再统一操作批量更新 DOM。")]),s("li",null,[s("p",null,"Vue Diff 使用双向链表，边对比，边更新 DOM。")])],-1),b=s("blockquote",null,[s("p",null,"注意两者处于不同赛道，不存在谁取代谁这一说法，别踩一捧一。")],-1),m=s("ul",null,[s("li",null,[s("p",null,"React 只关注底层，上层应用解决方案交给社区，造就了 React 社区繁荣，同时 React 团队有更多时间专注底层。未来 React 的发展依然会在 函数式编程 这个核心思想的下进行升级。")]),s("li",null,[s("p",null,"Vue 提供了一揽子全家桶解决方案，比如 Vuex、Vue-Router、Vue-CLI、Vutur 工具等。减少选择困难症，只需认准官方给出的解决方案即可。Vue 依然会定位简单易上手（渐进式开发），依然是考虑通过依赖收集来实现数据可变。")])],-1),C=l("",6),A=l("",10),_=s("ul",null,[s("li",null,"Store，Store 存放应用程序的状态，并且有帮助函数来访问这些状态。Store 可以用来聆听变化和发送 action。Store 只有一个。"),s("li",null,"Reducers，数据的状态是通过 reducer 函数来改变的。"),s("li",null,"Actions，Actions 代表的是一个对象。有两部分，一个是 action 本身，另一个就是它的 payload。简单说就是对哪些数据进行哪些操作。"),s("li",null,"React-Redux，Redux 本身和 React 没有关系，只是数据处理中心，是 React-Redux 让他们联系在一起。React-rRedux 提供两个方法：connect 和 Provider。")],-1),R=l("",25);function g(f,k,x,q,S,P){const e=p("font");return r(),c("div",null,[u,s("p",null,[a("3、"),n(e,{color:"red"},{default:t(()=>[d]),_:1}),a(),y,a("。我更偏向于告诉你，这个题第一层你可以怎么展开，第二层在你展开的这几点各自下面的重要点又是什么。至于你要不要扩充各个层级的点，以及要不要更深入增加层级，就是需要自己去思考和研究的了。")]),D,s("details",null,[F,s("p",null,[a("6、"),n(e,{color:"gray"},{default:t(()=>[a("diff 算法实现")]),_:1})]),h,s("p",null,[a("7、"),n(e,{color:"gray"},{default:t(()=>[a("社区和未来发展")]),_:1})]),b,m]),C,s("details",null,[A,n(e,{color:"gray"},{default:t(()=>[a("另外一些需要知道的")]),_:1}),_]),R])}const M=o(i,[["render",g]]);export{E as __pageData,M as default};
