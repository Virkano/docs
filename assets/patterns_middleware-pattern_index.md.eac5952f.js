import{_ as s,o as a,c as e,U as n}from"./chunks/framework.0f008bc5.js";const A=JSON.parse('{"title":"中介/中间件模式","description":"","frontmatter":{"author":"Kano","date":"2023-03-07T00:00:00.000Z"},"headers":[],"relativePath":"patterns/middleware-pattern/index.md","filePath":"patterns/middleware-pattern/index.md","lastUpdated":1690359404000}'),p={name:"patterns/middleware-pattern/index.md"},l=n(`<h1 id="中介-中间件模式" tabindex="-1">中介/中间件模式 <a class="header-anchor" href="#中介-中间件模式" aria-label="Permalink to &quot;中介/中间件模式&quot;">​</a></h1><p>通过中间件模式，我们能够更好地处理组件之间的通信，可以想象成有一个中心点，其它组件只需要由它来进行接受和转发信息即可，组件之间不需要直接对话，在 <code>JS</code> 中，一个中间件可以是一个对象字面量或者一个函数。</p><p>举个例子，可以将这种模式转换为空中交通管制员和飞行员之间的关系，飞行员只需要与空中交通管制员对话，而不是让飞行员直接相互交谈，想想，如果是直接交谈，你找我我找你，到底听谁的呢？山里都得有个老大不是哈哈，没有人管控就会非常混乱。</p><p>那么在这当中空中交通管制员的任务就是要确保所有飞机都接收到安全飞行所需的信息，不会撞到其他飞机。</p><p>那么同样在 <code>JS</code> 中，如果有大量的组件，没有一个领头的，相互之间通信也会非常混乱，对于开发者而言也很痛苦，不知道这个数据到底怎么传，如下图所示：</p><p>那么，使用了中间件模式之后，不需要让组件之间去通信了，而是直接从多对多的关系变为了多对一的关系，如下图所示。</p><h2 id="简单的聊天室" tabindex="-1">简单的聊天室 <a class="header-anchor" href="#简单的聊天室" aria-label="Permalink to &quot;简单的聊天室&quot;">​</a></h2><p>我们以一个简单的聊天室来演示中介/中间件模式，在这个聊天室里面的用户不需要私聊，而是把这个聊天室当做用户之间的中介，由聊天室来接受信息并转发信息，我们来看看代码：</p><iframe src="https://stackblitz.com/edit/middleware-pattern-chatroom?devToolsHeight=33&amp;embed=1&amp;file=index.js"></iframe><h2 id="express-中的中间件学习" tabindex="-1">Express 中的中间件学习 <a class="header-anchor" href="#express-中的中间件学习" aria-label="Permalink to &quot;Express 中的中间件学习&quot;">​</a></h2><p>了解 <code>Express.js</code> 的同学一定知道它的中间件，我们现在来回顾一下，对于前端的接口路由，我们可以添加一个回调，如下代码所示：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">express</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">req</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">next</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">req</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">headers</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">test-header</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1234</span></span>
<span class="line highlighted"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">next</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>注意第 5 行代码，有个 next 方法执行，代表我们会执行下一个回调，那么通过这样，在请求和响应之间就可以创建中间件函数链，如下图所示：</p><p>我们再把上述代码完善一下，看看下方的 demo，展示一个中间件链的使用：</p><iframe src="https://stackblitz.com/edit/middleware-pattern-node-express?ctl=1&amp;embed=1&amp;file=index.js"></iframe><p>当我们访问根路径 <code>/</code> 时，请求和响应之间的两个中间件都会调用。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>中间件模式让所有通信都通过一个中心点，从而简化对象之间的多对多关系。</p>`,18),o=[l];function t(r,c,i,d,D,y){return a(),e("div",null,o)}const C=s(p,[["render",t]]);export{A as __pageData,C as default};
